1. Constants Initialization:
------------------------------
These constants represent fixed values used throughout the program:

const PART_TIME = 1;
const FULL_TIME = 2;
const WAGE_PER_HR = 20;
const MAX_WORKING_DAYS = 20;
const MAX_WORKING_HRS = 100;
PART_TIME and FULL_TIME: These values help in determining whether the employee works part-time or full-time.
WAGE_PER_HR: This is the wage rate per hour worked.
MAX_WORKING_DAYS: The maximum number of working days in a month (20 days).
MAX_WORKING_HRS: The maximum total working hours allowed for the month (100 hours).

2. Variables to Track Wages, Days, and Hours:
---------------------------------------------

let totalWage = 0;
let totalWorkingHrs = 0;
let totalWorkingDays = 0;
totalWage: Stores the total wage calculated for the employee.
totalWorkingHrs: Tracks the cumulative total of hours the employee has worked.
totalWorkingDays: Tracks the number of days worked by the employee.

3. Header for Output:
---------------------
The header prints out a formatted table to show the details for each day:


console.log("Day |  Workinghrs |  Wage |  Total working hrs");
console.log("____   __________   ______   _________________");
This is just to format the output and make it more readable.

4. While Loop to Calculate Wages:
----------------------------------
This loop continues as long as both conditions are true:

while (totalWorkingDays < MAX_WORKING_DAYS && totalWorkingHrs < MAX_WORKING_HRS) {
totalWorkingDays < MAX_WORKING_DAYS: Ensures the employee doesn't work more than the maximum number of days (20).
totalWorkingHrs < MAX_WORKING_HRS: Ensures the employee doesn't work more than the maximum number of hours (100).
Inside the Loop:
Each iteration of the loop represents one day of work. Here's what happens inside the loop:

5. Incrementing the Working Day:
--------------------------------

totalWorkingDays++;
This increases the count of days worked by one each time the loop runs.

6. Random Employee Type (Full-Time or Part-Time):
-------------------------------------------------
let empType = Math.floor(Math.random() * 3);
This line randomly assigns the employee type (either full-time, part-time, or absent) by generating a random number between 0 and 2.
0 represents the employee is absent (working hours = 0).
1 represents the employee works part-time (working hours = 4).
2 represents the employee works full-time (working hours = 8).

7. Determining the Working Hours for the Day:
---------------------------------------------
let workingHrs = 0;

switch (empType) {
    case FULL_TIME:
        workingHrs = 8;
        break;
    case PART_TIME:
        workingHrs = 4;
        break;
    default:
        workingHrs = 0;
        break;
}
Based on the value of empType, the working hours are assigned:

Full-time: 8 hours.
Part-time: 4 hours.
Absent: 0 hours.

8. Check for Maximum Working Hours Limit:
------------------------------------------

if (totalWorkingHrs + workingHrs > MAX_WORKING_HRS) {
    workingHrs = MAX_WORKING_HRS - totalWorkingHrs;
}
This condition ensures that the total working hours do not exceed the maximum allowed hours (100 hours).
If the next day's working hours would exceed 100 hours, it adjusts the working hours for that day so that the total working hours remain exactly 100.

9. Updating Total Working Hours and Wage:
-----------------------------------------

totalWorkingHrs += workingHrs;
let wage = workingHrs * WAGE_PER_HR;
totalWage += wage;
totalWorkingHrs += workingHrs: Adds the hours worked for the day to the total working hours.
wage = workingHrs * WAGE_PER_HR: Calculates the wage for the current day by multiplying the working hours with the hourly wage.
totalWage += wage: Adds the day's wage to the total wage earned so far.

10. Output for Each Day:
-------------------------
console.log(`${totalWorkingDays}    |   ${workingHrs}    |   ${wage}    |   ${totalWorkingHrs}`);
This line prints out the details for each day:

The day number (totalWorkingDays).
The number of hours worked (workingHrs).
The wage earned for that day (wage).
The cumulative total of working hours so far (totalWorkingHrs).

11. Final Output After Loop Ends:
---------------------------------
After the loop ends (either the total working days or total working hours limit has been reached), the program prints out the final summary:
console.log("Total wage for a month is " + totalWage);
console.log("Total working days: " + totalWorkingDays);
console.log("Total working hours: " + totalWorkingHrs);
Total wage for a month: Displays the total wage earned after all the days are processed.
Total working days: Displays the total number of days worked in the month.
Total working hours: Displays the total number of hours worked in the month.
Example Output:
Suppose the random employee type values were as follows:

Day 1: Full-time (8 hours).
Day 2: Part-time (4 hours).
Day 3: Absent (0 hours).
Day 4: Full-time (8 hours).
Day 5: Part-time (4 hours).
The output would look something like this:


Day |  Workinghrs |  Wage |  Total working hrs
____   __________   ______   _________________
1    |   8    |   160    |   8
2    |   4    |   80    |   12
3    |   0    |   0    |   12
4    |   8    |   160    |   20
5    |   4    |   80    |   24
Total wage for a month is 480
Total working days: 5
Total working hours: 24

Conclusion:
-----------
The program simulates an employee working over a period of days.
It calculates the daily wage based on whether the employee works full-time, part-time, or is absent.
It tracks the total days worked, total hours worked, and total wages earned.
The program ensures the total working hours do not exceed the allowed maximum (100 hours).
